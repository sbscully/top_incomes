#!/usr/bin/env perl

use strict;
use warnings;

use lib 'lib';
use feature 'say';

use File::Slurp;
use Pipeline;
use Pipeline::Traverse qw(fetch at hashref arrayref);
use Pipeline::List qw(transpose zip_refs_compact flatten);
use JSON::Processor;

{
  my $in = 'data/converted.json';
  my $out = 'data/transformed.json';

  if (-f $out) { unlink $out }

  say "reading $in...";
  my $json = process_json { [ transform_top_incomes(@_) ] } read_file($in);

  say "writing output to $out...";
  write_file($out, $json);

  say "complete";
}

sub transform_top_incomes {
  # Munge the Spreadsheet::Read output to get at the raw data table
  say "parsing spreadsheet format...";
  my @table = pipeline @_, at(1), fetch('cell'), 'transpose', sub { splice @_, 2 };

  # Turn the data table rows into an array of
  # hashrefs, with the table headers as keys
  say "transforming $#table rows...";
  my $headers = shift @table;
  map { row_to_hashref($headers, $_) } @table;
}

sub row_to_hashref { pipeline @_, qw(zip_refs_compact flatten hashref) }